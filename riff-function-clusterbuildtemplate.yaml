apiVersion: build.knative.dev/v1alpha1
kind: ClusterBuildTemplate
metadata:
  name: riff-function
spec:
  parameters:
  - name: IMAGE
    description: The image you wish to create. For example, "repo/example", or "example.com/repo/image".
  - name: FUNCTION_ARTIFACT
    default: ""
    description: Path to the function artifact, source code or jar file (attempts
      detection if not specified)
  - name: FUNCTION_HANDLER
    default: ""
    description: Name of method or class to invoke (see specific invoker for detail)
  - name: FUNCTION_LANGUAGE
    default: ""
    description: Explicit language to use for the function, will skip detection.
  - name: BUILDER_IMAGE
    description: The builder image (must include v3 lifecycle and compatible buildpacks).
    default: projectriff/builder:latest
  - name: USE_CRED_HELPERS
    description: Use Docker credential helpers for Google's GCR, Amazon's ECR, or Microsoft's ACR.
    default: 'false'
  - name: CACHE
    description: The name of the persistent app cache volume
    default: empty-dir
  - name: USER_ID
    description: The user ID of the builder image user
    default: "1000"
  - name: GROUP_ID
    description: The group ID of the builder image user
    default: "1000"

  steps:
  - name: prepare
    image: ubuntu:18.04
    command: ["/bin/sh"]
    args:
    - "-c"
    - >
      chown -R "${USER_ID}:${GROUP_ID}" "/builder/home" &&
      chown -R "${USER_ID}:${GROUP_ID}" /layers &&
      chown -R "${USER_ID}:${GROUP_ID}" /cache &&
      chown -R "${USER_ID}:${GROUP_ID}" /workspace
    imagePullPolicy: Always
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers
    - name: "${CACHE}"
      mountPath: /cache

  - name: detect
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/detector"]
    args:
    - "-app=/workspace"
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    env:
    - name: RIFF
      value: "true"
    - name: RIFF_ARTIFACT
      value: ${FUNCTION_ARTIFACT}
    - name: RIFF_HANDLER
      value: ${FUNCTION_HANDLER}
    - name: RIFF_OVERRIDE
      value: ${FUNCTION_LANGUAGE}
    imagePullPolicy: Always
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: restore
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/restorer"]
    args:
    - "-group=/layers/group.toml"
    - "-layers=/layers"
    - "-path=/cache"
    imagePullPolicy: Always
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: analyze
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/analyzer"]
    args:
    - "-layers=/layers"
    - "-analyzed=/layers/analyzed.toml"
    - "-helpers=${USE_CRED_HELPERS}"
    - "-group=/layers/group.toml"
    - "${IMAGE}"
    imagePullPolicy: Always
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: build
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/builder"]
    args:
    - "-layers=/layers"
    - "-app=/workspace"
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    env:
    - name: RIFF
      value: "true"
    - name: RIFF_ARTIFACT
      value: ${FUNCTION_ARTIFACT}
    - name: RIFF_HANDLER
      value: ${FUNCTION_HANDLER}
    - name: RIFF_OVERRIDE
      value: ${FUNCTION_LANGUAGE}
    imagePullPolicy: Always
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: export
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/exporter"]
    args:
    - "-layers=/layers"
    - "-analyzed=/layers/analyzed.toml"
    - "-helpers=${USE_CRED_HELPERS}"
    - "-app=/workspace"
    - "-group=/layers/group.toml"
    - "${IMAGE}"
    imagePullPolicy: Always
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: cache
    image: ${BUILDER_IMAGE}
    command: ["/lifecycle/cacher"]
    args:
    - "-group=/layers/group.toml"
    - "-layers=/layers"
    - "-path=/cache"
    imagePullPolicy: Always
    volumeMounts:
    - name: "${CACHE}"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  volumes:
  - name: empty-dir
    emptyDir: {}
  - name: layers-dir
    emptyDir: {}
