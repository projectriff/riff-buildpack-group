apiVersion: build.knative.dev/v1alpha1
kind: ClusterBuildTemplate
metadata:
  name: riff-cnb
spec:
  parameters:
    - name: IMAGE
      description: The image you wish to create. For example, "repo/example", or "example.com/repo/image".
    - name: FUNCTION_ARTIFACT
      default: ""
      description: Path to the function artifact, source code or jar file (attempts
        detection if not specified)
    - name: FUNCTION_HANDLER
      default: ""
      description: Name of method or class to invoke (see specific invoker for detail)
    - name: FUNCTION_LANGUAGE
      default: ""
      description: Explicit language to use for the function, will skip detection.
    - name: RUN_IMAGE
      description: The run image buildpacks will use as the base for IMAGE.
      default: packs/run:0.0.1-rc.755
    - name: BUILDER_IMAGE
      description: The builder image provides the buildpacks that will build the IMAGE from source.
      default: projectriff/builder:latest
    - name: USE_CRED_HELPERS
      description: Use Docker credential helpers for Google's GCR, Amazon's ECR, or Microsoft's ACR.
      default: 'true'
    - name: USER_ID
      description: The user ID of the builder image user
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user
      default: "1000"
    - name: CACHE
      description: The name of the volume to use for the build cache.
      default: empty-dir
  steps:
    - name: prepare
      image: ubuntu:18.04
      command: ["/bin/sh"]
      args:
        - "-c"
        # Change owner of files to the pack user so that later lifecycle comamnds can read them.
        # Generate riff.toml
        - >
          chown -R "${USER_ID}:${GROUP_ID}" "/builder/home" &&
          chown -R "${USER_ID}:${GROUP_ID}" /layers &&
          chown -R "${USER_ID}:${GROUP_ID}" /workspace &&
          echo "artifact = '${FUNCTION_ARTIFACT}'" > /workspace/riff.toml &&
          echo "handler = '${FUNCTION_HANDLER}'" >> /workspace/riff.toml &&
          echo "override = '${FUNCTION_LANGUAGE}'" >> /workspace/riff.toml
      volumeMounts:
        - name: ${CACHE}
          mountPath: /layers
      imagePullPolicy: Always
    - name: detect
      image: ${BUILDER_IMAGE}
      command: ["/lifecycle/detector"]
      args:
        - "-app=/workspace"
        - "-group=/layers/group.toml"
        - "-plan=/layers/plan.toml"
      volumeMounts:
        - name: ${CACHE}
          mountPath: /layers
      imagePullPolicy: Always
    - name: analyze
      image: ${BUILDER_IMAGE}
      command: ["/lifecycle/analyzer"]
      args:
        - "-layers=/layers"
        - "-helpers=${USE_CRED_HELPERS}"
        - "-group=/layers/group.toml"
        - "${IMAGE}"
      volumeMounts:
        - name: ${CACHE}
          mountPath: /layers
      imagePullPolicy: Always
    - name: build
      image: ${BUILDER_IMAGE}
      command: ["/lifecycle/builder"]
      args:
        - "-layers=/layers"
        - "-app=/workspace"
        - "-group=/layers/group.toml"
        - "-plan=/layers/plan.toml"
      volumeMounts:
        - name: ${CACHE}
          mountPath: /layers
      imagePullPolicy: Always
    - name: export
      image: ${BUILDER_IMAGE}
      command: ["/lifecycle/exporter"]
      args:
        - "-layers=/layers"
        - "-helpers=${USE_CRED_HELPERS}"
        - "-app=/workspace"
        - "-image=${RUN_IMAGE}"
        - "-group=/layers/group.toml"
        - "${IMAGE}"
      volumeMounts:
        - name: ${CACHE}
          mountPath: /layers
      imagePullPolicy: Always
  volumes:
    - name: empty-dir
      emptyDir: {}
